from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
import time

from database.database import Database
from database.models import Advertisement, InlineButton
from keyboards.inline import (
    get_ads_list_keyboard,
    get_ad_control_keyboard,
    get_delete_confirmation_keyboard,
    get_main_settings_keyboard
)

router = Router()



current_page_cache = {}


@router.callback_query(F.data == "list_ads")
async def list_advertisements(callback: CallbackQuery, db: Database, is_admin: bool):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    if not is_admin:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", show_alert=True)
        return
    
    ads = await db.get_advertisements(callback.message.chat.id)
    
    if not ads:
        await callback.message.edit_text(
            "üìù –í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ.",
            reply_markup=get_main_settings_keyboard()
        )
        await callback.answer()
        return
    
    current_page_cache[callback.from_user.id] = 0
    
    await callback.message.edit_text(
        "üìù –°–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_ads_list_keyboard(ads, page=0)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("page:"))
async def navigate_pages(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    page = int(callback.data.split(":")[1])
    
    current_page_cache[callback.from_user.id] = page
    
    ads = await db.get_advertisements(callback.message.chat.id)
    
    if not ads:
        await callback.message.edit_text(
            "üìù –í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ.",
            reply_markup=get_main_settings_keyboard()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üìù –°–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_ads_list_keyboard(ads, page=page)
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_list")
async def back_to_ads_list(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    page = current_page_cache.get(callback.from_user.id, 0)
    
    ads = await db.get_advertisements(callback.message.chat.id)
    
    if not ads:
        await callback.message.edit_text(
            "üìù –í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ.",
            reply_markup=get_main_settings_keyboard()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üìù –°–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_ads_list_keyboard(ads, page=page)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("ad:"))
async def show_advertisement(callback: CallbackQuery, db: Database, is_admin: bool):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞"""
    if not is_admin:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏.", show_alert=True)
        return
    
    ad_id = int(callback.data.split(":")[1])
    
    ad = await db.get_advertisement(ad_id)
    
    if not ad or ad.chat_id != callback.message.chat.id:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if ad.is_active else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
    
    def format_minutes(minutes):
        if minutes < 60:
            return f"{minutes} –º–∏–Ω."
        elif minutes < 1440:
            hours = minutes // 60
            mins = minutes % 60
            return f"{hours} —á." + (f" {mins} –º–∏–Ω." if mins > 0 else "")
        else:
            days = minutes // 1440
            hours = (minutes % 1440) // 60
            return f"{days} –¥." + (f" {hours} —á." if hours > 0 else "")
    
    topic_info = f"–¢–µ–º–∞: ID {ad.topic_id}" if ad.topic_id else "–ë–µ–∑ —Ç–µ–º—ã"
    button_info = f"–ö–Ω–æ–ø–∫–∞: {ad.button.text} ({ad.button.url})" if ad.button else "–ë–µ–∑ –∫–Ω–æ–ø–∫–∏"
    media_info = f"–ú–µ–¥–∏–∞: {'–§–æ—Ç–æ' if ad.media_type == 'photo' else '–í–∏–¥–µ–æ'}" if ad.media_type else "–ë–µ–∑ –º–µ–¥–∏–∞"
    
    text = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∫–ª–∞–º–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ ID: {ad.id}\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {format_minutes(ad.interval_minutes)}\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_minutes(ad.duration_minutes)}\n"
        f"{topic_info}\n"
        f"{button_info}\n"
        f"{media_info}\n\n"
        f"–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n{ad.text}"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_ad_control_keyboard(ad.id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_ad:"))
async def toggle_advertisement(callback: CallbackQuery, db: Database, is_admin: bool):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if not is_admin:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏.", show_alert=True)
        return
    
    ad_id = int(callback.data.split(":")[1])
    
    ad = await db.get_advertisement(ad_id)
    
    if not ad or ad.chat_id != callback.message.chat.id:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    ad.is_active = not ad.is_active
    
    await db.update_advertisement(ad)
    
    await show_advertisement(callback, db, is_admin)
    
    status = "–≤–∫–ª—é—á–µ–Ω–æ" if ad.is_active else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
    await callback.answer(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {status}", show_alert=True)


@router.callback_query(F.data.startswith("delete_ad:"))
async def delete_advertisement_confirm(callback: CallbackQuery, is_admin: bool):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if not is_admin:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", show_alert=True)
        return
    
    ad_id = int(callback.data.split(":")[1])
    
    await callback.message.edit_text(
        "üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_delete_confirmation_keyboard(ad_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete:"))
async def confirm_delete_advertisement(callback: CallbackQuery, db: Database, is_admin: bool):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if not is_admin:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", show_alert=True)
        return
    
    ad_id = int(callback.data.split(":")[1])
    chat_id = callback.message.chat.id
    
    result = await db.delete_advertisement(ad_id, chat_id)
    
    if result:
        await callback.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", show_alert=True)
    
    await back_to_ads_list(callback, db)


@router.callback_query(F.data.startswith("cancel_delete:"))
async def cancel_delete_advertisement(callback: CallbackQuery, db: Database, is_admin: bool):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if not is_admin:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏.", show_alert=True)
        return
    
    ad_id = int(callback.data.split(":")[1])
    
    await show_advertisement(callback, db, is_admin)
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@router.callback_query(F.data.startswith("duplicate_ad:"))
async def duplicate_advertisement(callback: CallbackQuery, db: Database, is_admin: bool):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if not is_admin:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏.", show_alert=True)
        return
    
    ad_id = int(callback.data.split(":")[1])
    
    original_ad = await db.get_advertisement(ad_id)
    
    if not original_ad or original_ad.chat_id != callback.message.chat.id:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    new_ad = Advertisement(
        chat_id=original_ad.chat_id,
        text=original_ad.text,
        media_type=original_ad.media_type,
        media_file_id=original_ad.media_file_id,
        topic_id=original_ad.topic_id,
        button=original_ad.button,
        interval_minutes=original_ad.interval_minutes,
        duration_minutes=original_ad.duration_minutes,
        is_active=True,  
        created_at=int(time.time())  
    )
    
    new_ad_id = await db.add_advertisement(new_ad)
    
    await callback.answer(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Å ID: {new_ad_id}", show_alert=True)
    
    await back_to_ads_list(callback, db) 