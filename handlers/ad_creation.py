from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
import time

from database.database import Database
from database.models import Advertisement, InlineButton
from keyboards.inline import (
    get_ad_creation_keyboard,
    get_interval_keyboard,
    get_duration_keyboard,
    get_main_settings_keyboard
)

router = Router()


class AdCreationStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_media = State()
    waiting_for_button_text = State()
    waiting_for_button_url = State()
    waiting_for_topic_id = State()
    waiting_for_custom_interval = State()
    waiting_for_custom_duration = State()


ad_creation_data = {}


def get_user_chat_key(user_id: int, chat_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    return f"{user_id}_{chat_id}"


@router.callback_query(F.data == "add_ad")
async def add_advertisement(callback: CallbackQuery, state: FSMContext, is_admin: bool):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if not is_admin:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.", show_alert=True)
        return
    
    user_chat_key = get_user_chat_key(callback.from_user.id, callback.message.chat.id)
    
    ad_creation_data[user_chat_key] = {
        "chat_id": callback.message.chat.id,
        "created_at": int(time.time())
    }
    
    await state.set_state(AdCreationStates.waiting_for_text)
    
    await callback.message.edit_text(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ /cancel.",
    )
    await callback.answer()


@router.message(StateFilter(AdCreationStates.waiting_for_text))
async def process_ad_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_settings_keyboard()
        )
        return
    
    user_chat_key = get_user_chat_key(message.from_user.id, message.chat.id)
    ad_creation_data[user_chat_key]["text"] = message.text
    
    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_ad_creation_keyboard("media_type")
    )
    
    await state.set_state(AdCreationStates.waiting_for_media)


@router.callback_query(StateFilter(AdCreationStates.waiting_for_media), F.data.startswith("media_type:"))
async def process_media_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ–¥–∏–∞"""
    media_type = callback.data.split(":")[1]
    user_chat_key = get_user_chat_key(callback.from_user.id, callback.message.chat.id)
    
    if media_type == "none":
        ad_creation_data[user_chat_key]["media_type"] = None
        ad_creation_data[user_chat_key]["media_file_id"] = None
        
        await callback.message.edit_text(
            "üîò –ù—É–∂–Ω–∞ –ª–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è?",
            reply_markup=get_ad_creation_keyboard("need_button")
        )
        await state.set_state(None)  
        await callback.answer()
        return
    
    ad_creation_data[user_chat_key]["media_type"] = media_type
    
    await callback.message.edit_text(
        f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {'—Ñ–æ—Ç–æ' if media_type == 'photo' else '–≤–∏–¥–µ–æ'} –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'."
    )
    await state.set_state(AdCreationStates.waiting_for_media)
    await callback.answer()


@router.message(StateFilter(AdCreationStates.waiting_for_media))
async def process_media_file(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞"""
    user_chat_key = get_user_chat_key(message.from_user.id, message.chat.id)
    media_type = ad_creation_data[user_chat_key].get("media_type")
    
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_settings_keyboard()
        )
        return
    
    file_id = None
    if media_type == "photo" and message.photo:
        file_id = message.photo[-1].file_id
    elif media_type == "video" and message.video:
        file_id = message.video.file_id
    else:
        await message.answer(
            f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {'—Ñ–æ—Ç–æ' if media_type == 'photo' else '–≤–∏–¥–µ–æ'}.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ /cancel."
        )
        return
    
    ad_creation_data[user_chat_key]["media_file_id"] = file_id
    
    await message.answer(
        "üîò –ù—É–∂–Ω–∞ –ª–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è?",
        reply_markup=get_ad_creation_keyboard("need_button")
    )
    await state.set_state(None)  


@router.callback_query(F.data.startswith("need_button:"))
async def process_need_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏"""
    need_button = callback.data.split(":")[1] == "yes"
    user_chat_key = get_user_chat_key(callback.from_user.id, callback.message.chat.id)
    
    if not need_button:
        ad_creation_data[user_chat_key]["button"] = None
        
        await callback.message.edit_text(
            "üìö –ù—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ? (–¥–ª—è —á–∞—Ç–æ–≤ —Å —Ç–µ–º–∞–º–∏)",
            reply_markup=get_ad_creation_keyboard("need_topic")
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üî§ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ /cancel."
    )
    await state.set_state(AdCreationStates.waiting_for_button_text)
    await callback.answer()


@router.message(StateFilter(AdCreationStates.waiting_for_button_text))
async def process_button_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_settings_keyboard()
        )
        return
    
    user_chat_key = get_user_chat_key(message.from_user.id, message.chat.id)
    
    if "button" not in ad_creation_data[user_chat_key]:
        ad_creation_data[user_chat_key]["button"] = {}
    
    ad_creation_data[user_chat_key]["button"]["text"] = message.text
    
    await message.answer(
        "üîó –í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://).\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ /cancel."
    )
    await state.set_state(AdCreationStates.waiting_for_button_url)


@router.message(StateFilter(AdCreationStates.waiting_for_button_url))
async def process_button_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è URL –∫–Ω–æ–ø–∫–∏"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_settings_keyboard()
        )
        return
    
    user_chat_key = get_user_chat_key(message.from_user.id, message.chat.id)
    
    url = message.text.strip()
    if not (url.startswith("http://") or url.startswith("https://")):
        await message.answer(
            "‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ /cancel."
        )
        return
    
    ad_creation_data[user_chat_key]["button"]["url"] = url
    
    await message.answer(
        "üìö –ù—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ? (–¥–ª—è —á–∞—Ç–æ–≤ —Å —Ç–µ–º–∞–º–∏)",
        reply_markup=get_ad_creation_keyboard("need_topic")
    )
    await state.set_state(None)  


@router.callback_query(F.data.startswith("need_topic:"))
async def process_need_topic(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ç–µ–º—ã"""
    need_topic = callback.data.split(":")[1] == "yes"
    user_chat_key = get_user_chat_key(callback.from_user.id, callback.message.chat.id)
    
    if not need_topic:
        ad_creation_data[user_chat_key]["topic_id"] = None
        
        await callback.message.edit_text(
            "‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
            reply_markup=get_interval_keyboard()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üÜî –í–≤–µ–¥–∏—Ç–µ ID —Ç–µ–º—ã (topic_id) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n"
        "–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ /cancel."
    )
    await state.set_state(AdCreationStates.waiting_for_topic_id)
    await callback.answer()


@router.message(StateFilter(AdCreationStates.waiting_for_topic_id))
async def process_topic_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç–µ–º—ã"""
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_settings_keyboard()
        )
        return
    
    user_chat_key = get_user_chat_key(message.from_user.id, message.chat.id)
    
    try:
        topic_id = int(message.text.strip())
        if topic_id <= 0:
            raise ValueError("Topic ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await message.answer(
            "‚ùå ID —Ç–µ–º—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–µ–º—ã.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ /cancel."
        )
        return
    
    ad_creation_data[user_chat_key]["topic_id"] = topic_id
    
    await message.answer(
        "‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_interval_keyboard()
    )
    await state.set_state(None)  


@router.callback_query(F.data.startswith("interval:"))
async def process_interval(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    interval_value = callback.data.split(":")[1]
    user_chat_key = get_user_chat_key(callback.from_user.id, callback.message.chat.id)
    
    if interval_value == "custom":
        await callback.message.edit_text(
            "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 5 –¥–æ 1440).\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ /cancel."
        )
        await state.set_state(AdCreationStates.waiting_for_custom_interval)
        await callback.answer()
        return
    
    ad_creation_data[user_chat_key]["interval_minutes"] = int(interval_value)
    
    await callback.message.edit_text(
        "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_duration_keyboard()
    )
    await callback.answer()


@router.message(StateFilter(AdCreationStates.waiting_for_custom_interval))
async def process_custom_interval(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    from config import config
    
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_settings_keyboard()
        )
        return
    
    user_chat_key = get_user_chat_key(message.from_user.id, message.chat.id)
    
    try:
        interval = int(message.text.strip())
        if interval < config.MIN_INTERVAL or interval > config.MAX_INTERVAL:
            raise ValueError(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {config.MIN_INTERVAL} –¥–æ {config.MAX_INTERVAL} –º–∏–Ω—É—Ç")
    except ValueError as e:
        await message.answer(
            f"‚ùå {str(e)}.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ /cancel."
        )
        return
    
    ad_creation_data[user_chat_key]["interval_minutes"] = interval
    
    await message.answer(
        "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_duration_keyboard()
    )
    await state.set_state(None)  


@router.callback_query(F.data.startswith("duration:"))
async def process_duration(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞"""
    duration_value = callback.data.split(":")[1]
    user_chat_key = get_user_chat_key(callback.from_user.id, callback.message.chat.id)
    
    if duration_value == "custom":
        await callback.message.edit_text(
            "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 5 –¥–æ 10080).\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ /cancel."
        )
        await state.set_state(AdCreationStates.waiting_for_custom_duration)
        await callback.answer()
        return
    
    ad_creation_data[user_chat_key]["duration_minutes"] = int(duration_value)
    
    await show_ad_summary(callback, user_chat_key)


@router.message(StateFilter(AdCreationStates.waiting_for_custom_duration))
async def process_custom_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    from config import config
    
    if message.text == "/cancel":
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_settings_keyboard()
        )
        return
    
    user_chat_key = get_user_chat_key(message.from_user.id, message.chat.id)
    
    try:
        duration = int(message.text.strip())
        if duration < config.MIN_DURATION or duration > config.MAX_DURATION:
            raise ValueError(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {config.MIN_DURATION} –¥–æ {config.MAX_DURATION} –º–∏–Ω—É—Ç")
    except ValueError as e:
        await message.answer(
            f"‚ùå {str(e)}.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ /cancel."
        )
        return
    
    ad_creation_data[user_chat_key]["duration_minutes"] = duration
    
    await show_ad_summary(message, user_chat_key)
    await state.set_state(None)  


async def show_ad_summary(message_or_callback, user_chat_key: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –æ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    ad_data = ad_creation_data[user_chat_key]
    
    text = "üìã –°–≤–æ–¥–∫–∞ –æ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:\n\n"
    
    ad_text = ad_data.get("text", "–ù–µ —É–∫–∞–∑–∞–Ω")
    if len(ad_text) > 100:
        ad_text = ad_text[:97] + "..."
    text += f"üìù –¢–µ–∫—Å—Ç: {ad_text}\n"
    
    media_type = ad_data.get("media_type")
    if media_type:
        text += f"üìä –¢–∏–ø –º–µ–¥–∏–∞: {'–§–æ—Ç–æ' if media_type == 'photo' else '–í–∏–¥–µ–æ'}\n"
    else:
        text += "üìä –¢–∏–ø –º–µ–¥–∏–∞: –ë–µ–∑ –º–µ–¥–∏–∞\n"
    
    button = ad_data.get("button")
    if button:
        text += f"üîò –ö–Ω–æ–ø–∫–∞: {button.get('text')} ({button.get('url')})\n"
    else:
        text += "üîò –ö–Ω–æ–ø–∫–∞: –ë–µ–∑ –∫–Ω–æ–ø–∫–∏\n"
    
    topic_id = ad_data.get("topic_id")
    if topic_id:
        text += f"üìö –¢–µ–º–∞: ID {topic_id}\n"
    else:
        text += "üìö –¢–µ–º–∞: –ë–µ–∑ —Ç–µ–º—ã\n"
    
    interval = ad_data.get("interval_minutes", 60)
    duration = ad_data.get("duration_minutes", 1440)
    
    def format_minutes(minutes):
        if minutes < 60:
            return f"{minutes} –º–∏–Ω."
        elif minutes < 1440:
            hours = minutes // 60
            mins = minutes % 60
            return f"{hours} —á." + (f" {mins} –º–∏–Ω." if mins > 0 else "")
        else:
            days = minutes // 1440
            hours = (minutes % 1440) // 60
            return f"{days} –¥." + (f" {hours} —á." if hours > 0 else "")
    
    text += f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {format_minutes(interval)}\n"
    text += f"üìÜ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_minutes(duration)}\n\n"
    
    text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:"
    
    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(
            text,
            reply_markup=get_ad_creation_keyboard("confirm")
        )
        await message_or_callback.answer()
    else:
        await message_or_callback.answer(
            text,
            reply_markup=get_ad_creation_keyboard("confirm")
        )


@router.callback_query(F.data == "confirm_ad:yes")
async def confirm_ad_creation(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    user_chat_key = get_user_chat_key(callback.from_user.id, callback.message.chat.id)
    
    if user_chat_key not in ad_creation_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    ad_data = ad_creation_data[user_chat_key]
    
    button = None
    if ad_data.get("button"):
        from database.models import InlineButton
        button = InlineButton(
            text=ad_data["button"]["text"],
            url=ad_data["button"]["url"]
        )
    
    advertisement = Advertisement(
        chat_id=ad_data["chat_id"],
        text=ad_data["text"],
        media_type=ad_data.get("media_type"),
        media_file_id=ad_data.get("media_file_id"),
        topic_id=ad_data.get("topic_id"),
        button=button,
        interval_minutes=ad_data.get("interval_minutes", 60),
        duration_minutes=ad_data.get("duration_minutes", 1440),
        is_active=True,
        created_at=ad_data["created_at"]
    )
    
    ad_id = await db.add_advertisement(advertisement)
    
    del ad_creation_data[user_chat_key]
    await state.clear()
    
    await callback.message.edit_text(
        f"‚úÖ –†–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ (ID: {ad_id}).\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
        reply_markup=get_main_settings_keyboard()
    )
    await callback.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!", show_alert=True)


@router.callback_query(F.data == "cancel_ad_creation")
async def cancel_ad_creation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    user_chat_key = get_user_chat_key(callback.from_user.id, callback.message.chat.id)
    
    if user_chat_key in ad_creation_data:
        del ad_creation_data[user_chat_key]
    
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_settings_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_media")
async def back_to_media(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –º–µ–¥–∏–∞"""
    await callback.message.edit_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_ad_creation_keyboard("media_type")
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_button")
async def back_to_button(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏"""
    await callback.message.edit_text(
        "üîò –ù—É–∂–Ω–∞ –ª–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è?",
        reply_markup=get_ad_creation_keyboard("need_button")
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_topic")
async def back_to_topic(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ç–µ–º—ã"""
    await callback.message.edit_text(
        "üìö –ù—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ? (–¥–ª—è —á–∞—Ç–æ–≤ —Å —Ç–µ–º–∞–º–∏)",
        reply_markup=get_ad_creation_keyboard("need_topic")
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_interval")
async def back_to_interval(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    await callback.message.edit_text(
        "‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_interval_keyboard()
    )
    await callback.answer() 